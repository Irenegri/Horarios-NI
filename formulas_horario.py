# -*- coding: utf-8 -*-
"""Formulas_horario.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vk9uwCoBZv7WVdTapPJb67SeOUFHV77H
"""

## Funcion grÃ¡fica

def Horario(archivo_horario, ax):
  from matplotlib.dates import DateFormatter
  df['HORA_INICIO']=pd.to_datetime(df['HORA_INICIO'].str.split().str[-1])
  df['HORA_FIN']=pd.to_datetime(df['HORA_FIN'].str.split().str[-1])
  materias=[x for x in df.DESCR100.unique()]
  colores=['yellow', 'green', 'blue', 'orange', 'red', 'violet']
  dic_colores=dict(zip(materias,colores))
  hh_mm = DateFormatter('%H:%M')
  ax.yaxis.set_major_formatter(hh_mm)
  plt.gca().invert_yaxis()
  for i, dia in enumerate(df.DIAL_STRING):
    ax.vlines(dia, df.HORA_INICIO[i], df.HORA_FIN[i],linewidth=70, 
              colors=dic_colores[df.DESCR100[i]])
  return ax

## Tiempo libre

def Tiempo_libre(df):
  from datetime import datetime
  
  year = datetime.now().year
  month = datetime.now().month
  day = datetime.now().day
  inicio_dia=datetime(year,month,day,7,0)
  fin_dia=datetime(year,month,day,22,0)
  try:
    df['HORA_INICIO']=pd.to_datetime(df['HORA_INICIO'].str.split().str[-1])
    df['HORA_FIN']=pd.to_datetime(df['HORA_FIN'].str.split().str[-1])
  except:
    df
  morning= (df.groupby('DIAL_STRING')['HORA_INICIO'].min()-inicio_dia).dt.total_seconds()/60
  afternoon= (fin_dia-df.groupby('DIAL_STRING')['HORA_FIN'].max()).dt.total_seconds()/60
  return morning+afternoon

## Tiempo Clase

def Tiempo_clases(df):
  tiempos={}
  for dia in df['DIAL_STRING'].unique():
    temporal=df[df['DIAL_STRING']==dia]
    clases_dia=temporal['HORA_FIN']-temporal['HORA_INICIO']
    minutos_clase=clases_dia.dt.total_seconds()/60
    tiempos[dia]=minutos_clase.sum()
  return pd.Series(tiempos)

## Tiempo muerto

def Tiempo_muerto(df):
  tiempos={}
  for dia in df['DIAL_STRING'].unique():
    temporal=df[df['DIAL_STRING']==dia]
    n_clases=temporal.shape[0]
    horas_muerdia=0
    if n_clases>1:
      for i in range(1,n_clases):  #range es para algo que sea iterable
        temp_hmdia= temporal.iloc[i,1]- temporal.iloc[i-1,2]
        horas_muerdia= horas_muerdia+ temp_hmdia.total_seconds()/60
        #horas_muerdia+=temp_hmdia
    tiempos[dia]=horas_muerdia
  return pd.Series(tiempos)